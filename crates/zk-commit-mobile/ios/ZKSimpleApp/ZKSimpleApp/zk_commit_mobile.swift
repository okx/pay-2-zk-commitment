// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(zk_commit_mobileFFI)
import zk_commit_mobileFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_zk_commit_mobile_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_zk_commit_mobile_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate class UniffiHandleMap<T> {
    private var map: [UInt64: T] = [:]
    private let lock = NSLock()
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


fileprivate struct FfiConverterInt32: FfiConverterPrimitive {
    typealias FfiType = Int32
    typealias SwiftType = Int32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Int32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Int32, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

fileprivate struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return Data(try readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}

fileprivate struct FfiConverterDuration: FfiConverterRustBuffer {
    typealias SwiftType = TimeInterval

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TimeInterval {
        let seconds: UInt64 = try readInt(&buf)
        let nanoseconds: UInt32 = try readInt(&buf)
        return Double(seconds) + (Double(nanoseconds) / 1.0e9)
    }

    public static func write(_ value: TimeInterval, into buf: inout [UInt8]) {
        if value.rounded(.down) > Double(Int64.max) {
            fatalError("Duration overflow, exceeds max bounds supported by Uniffi")
        }

        if value < 0 {
            fatalError("Invalid duration, must be non-negative")
        }

        let seconds = UInt64(value)
        let nanoseconds = UInt32((value - Double(seconds)) * 1.0e9)
        writeInt(&buf, seconds)
        writeInt(&buf, nanoseconds)
    }
}


public struct AmountSecretPairing {
    public var amount: UInt64
    public var secret: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(amount: UInt64, secret: UInt64) {
        self.amount = amount
        self.secret = secret
    }
}



extension AmountSecretPairing: Equatable, Hashable {
    public static func ==(lhs: AmountSecretPairing, rhs: AmountSecretPairing) -> Bool {
        if lhs.amount != rhs.amount {
            return false
        }
        if lhs.secret != rhs.secret {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(amount)
        hasher.combine(secret)
    }
}


public struct FfiConverterTypeAmountSecretPairing: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AmountSecretPairing {
        return
            try AmountSecretPairing(
                amount: FfiConverterUInt64.read(from: &buf), 
                secret: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: AmountSecretPairing, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.amount, into: &buf)
        FfiConverterUInt64.write(value.secret, into: &buf)
    }
}


public func FfiConverterTypeAmountSecretPairing_lift(_ buf: RustBuffer) throws -> AmountSecretPairing {
    return try FfiConverterTypeAmountSecretPairing.lift(buf)
}

public func FfiConverterTypeAmountSecretPairing_lower(_ value: AmountSecretPairing) -> RustBuffer {
    return FfiConverterTypeAmountSecretPairing.lower(value)
}


public struct CommitmentTree {
    public var depth: Int32
    public var commitmentRoot: Data
    public var commitmentTree: [Data]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(depth: Int32, commitmentRoot: Data, commitmentTree: [Data]) {
        self.depth = depth
        self.commitmentRoot = commitmentRoot
        self.commitmentTree = commitmentTree
    }
}



extension CommitmentTree: Equatable, Hashable {
    public static func ==(lhs: CommitmentTree, rhs: CommitmentTree) -> Bool {
        if lhs.depth != rhs.depth {
            return false
        }
        if lhs.commitmentRoot != rhs.commitmentRoot {
            return false
        }
        if lhs.commitmentTree != rhs.commitmentTree {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(depth)
        hasher.combine(commitmentRoot)
        hasher.combine(commitmentTree)
    }
}


public struct FfiConverterTypeCommitmentTree: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CommitmentTree {
        return
            try CommitmentTree(
                depth: FfiConverterInt32.read(from: &buf), 
                commitmentRoot: FfiConverterData.read(from: &buf), 
                commitmentTree: FfiConverterSequenceData.read(from: &buf)
        )
    }

    public static func write(_ value: CommitmentTree, into buf: inout [UInt8]) {
        FfiConverterInt32.write(value.depth, into: &buf)
        FfiConverterData.write(value.commitmentRoot, into: &buf)
        FfiConverterSequenceData.write(value.commitmentTree, into: &buf)
    }
}


public func FfiConverterTypeCommitmentTree_lift(_ buf: RustBuffer) throws -> CommitmentTree {
    return try FfiConverterTypeCommitmentTree.lift(buf)
}

public func FfiConverterTypeCommitmentTree_lower(_ value: CommitmentTree) -> RustBuffer {
    return FfiConverterTypeCommitmentTree.lower(value)
}


public struct GenerateProofOfClaimResult {
    public var proof: Data
    public var amount: UInt64
    public var publicInputs: [UInt64]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(proof: Data, amount: UInt64, publicInputs: [UInt64]) {
        self.proof = proof
        self.amount = amount
        self.publicInputs = publicInputs
    }
}



extension GenerateProofOfClaimResult: Equatable, Hashable {
    public static func ==(lhs: GenerateProofOfClaimResult, rhs: GenerateProofOfClaimResult) -> Bool {
        if lhs.proof != rhs.proof {
            return false
        }
        if lhs.amount != rhs.amount {
            return false
        }
        if lhs.publicInputs != rhs.publicInputs {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(proof)
        hasher.combine(amount)
        hasher.combine(publicInputs)
    }
}


public struct FfiConverterTypeGenerateProofOfClaimResult: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> GenerateProofOfClaimResult {
        return
            try GenerateProofOfClaimResult(
                proof: FfiConverterData.read(from: &buf), 
                amount: FfiConverterUInt64.read(from: &buf), 
                publicInputs: FfiConverterSequenceUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: GenerateProofOfClaimResult, into buf: inout [UInt8]) {
        FfiConverterData.write(value.proof, into: &buf)
        FfiConverterUInt64.write(value.amount, into: &buf)
        FfiConverterSequenceUInt64.write(value.publicInputs, into: &buf)
    }
}


public func FfiConverterTypeGenerateProofOfClaimResult_lift(_ buf: RustBuffer) throws -> GenerateProofOfClaimResult {
    return try FfiConverterTypeGenerateProofOfClaimResult.lift(buf)
}

public func FfiConverterTypeGenerateProofOfClaimResult_lower(_ value: GenerateProofOfClaimResult) -> RustBuffer {
    return FfiConverterTypeGenerateProofOfClaimResult.lower(value)
}


public struct ProofResult {
    public var firstInput: UInt64
    public var secondInput: UInt64
    public var output: UInt64
    public var duration: TimeInterval

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(firstInput: UInt64, secondInput: UInt64, output: UInt64, duration: TimeInterval) {
        self.firstInput = firstInput
        self.secondInput = secondInput
        self.output = output
        self.duration = duration
    }
}



extension ProofResult: Equatable, Hashable {
    public static func ==(lhs: ProofResult, rhs: ProofResult) -> Bool {
        if lhs.firstInput != rhs.firstInput {
            return false
        }
        if lhs.secondInput != rhs.secondInput {
            return false
        }
        if lhs.output != rhs.output {
            return false
        }
        if lhs.duration != rhs.duration {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(firstInput)
        hasher.combine(secondInput)
        hasher.combine(output)
        hasher.combine(duration)
    }
}


public struct FfiConverterTypeProofResult: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ProofResult {
        return
            try ProofResult(
                firstInput: FfiConverterUInt64.read(from: &buf), 
                secondInput: FfiConverterUInt64.read(from: &buf), 
                output: FfiConverterUInt64.read(from: &buf), 
                duration: FfiConverterDuration.read(from: &buf)
        )
    }

    public static func write(_ value: ProofResult, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.firstInput, into: &buf)
        FfiConverterUInt64.write(value.secondInput, into: &buf)
        FfiConverterUInt64.write(value.output, into: &buf)
        FfiConverterDuration.write(value.duration, into: &buf)
    }
}


public func FfiConverterTypeProofResult_lift(_ buf: RustBuffer) throws -> ProofResult {
    return try FfiConverterTypeProofResult.lift(buf)
}

public func FfiConverterTypeProofResult_lower(_ value: ProofResult) -> RustBuffer {
    return FfiConverterTypeProofResult.lower(value)
}


public enum ZkCommitmentMobileError {

    
    
    case FibonacciError
    case GenerateProofOfClaimError
}


public struct FfiConverterTypeZkCommitmentMobileError: FfiConverterRustBuffer {
    typealias SwiftType = ZkCommitmentMobileError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ZkCommitmentMobileError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .FibonacciError
        case 2: return .GenerateProofOfClaimError

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ZkCommitmentMobileError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case .FibonacciError:
            writeInt(&buf, Int32(1))
        
        
        case .GenerateProofOfClaimError:
            writeInt(&buf, Int32(2))
        
        }
    }
}


extension ZkCommitmentMobileError: Equatable, Hashable {}

extension ZkCommitmentMobileError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

fileprivate struct FfiConverterSequenceUInt64: FfiConverterRustBuffer {
    typealias SwiftType = [UInt64]

    public static func write(_ value: [UInt64], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterUInt64.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [UInt64] {
        let len: Int32 = try readInt(&buf)
        var seq = [UInt64]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterUInt64.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceData: FfiConverterRustBuffer {
    typealias SwiftType = [Data]

    public static func write(_ value: [Data], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterData.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Data] {
        let len: Int32 = try readInt(&buf)
        var seq = [Data]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterData.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeAmountSecretPairing: FfiConverterRustBuffer {
    typealias SwiftType = [AmountSecretPairing]

    public static func write(_ value: [AmountSecretPairing], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeAmountSecretPairing.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [AmountSecretPairing] {
        let len: Int32 = try readInt(&buf)
        var seq = [AmountSecretPairing]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeAmountSecretPairing.read(from: &buf))
        }
        return seq
    }
}
public func fibonacci()throws  -> ProofResult {
    return try  FfiConverterTypeProofResult.lift(try rustCallWithError(FfiConverterTypeZkCommitmentMobileError.lift) {
    uniffi_zk_commit_mobile_fn_func_fibonacci($0
    )
})
}
public func generateProofOfClaim(amount: UInt64, secret: UInt64, index: Int32, commitmentTree: CommitmentTree)throws  -> GenerateProofOfClaimResult {
    return try  FfiConverterTypeGenerateProofOfClaimResult.lift(try rustCallWithError(FfiConverterTypeZkCommitmentMobileError.lift) {
    uniffi_zk_commit_mobile_fn_func_generate_proof_of_claim(
        FfiConverterUInt64.lower(amount),
        FfiConverterUInt64.lower(secret),
        FfiConverterInt32.lower(index),
        FfiConverterTypeCommitmentTree.lower(commitmentTree),$0
    )
})
}
public func setupCommitment(distribution: [AmountSecretPairing]) -> CommitmentTree {
    return try!  FfiConverterTypeCommitmentTree.lift(try! rustCall() {
    uniffi_zk_commit_mobile_fn_func_setup_commitment(
        FfiConverterSequenceTypeAmountSecretPairing.lower(distribution),$0
    )
})
}
public func testPerformance() {try! rustCall() {
    uniffi_zk_commit_mobile_fn_func_test_performance($0
    )
}
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_zk_commit_mobile_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_zk_commit_mobile_checksum_func_fibonacci() != 12725) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_zk_commit_mobile_checksum_func_generate_proof_of_claim() != 56427) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_zk_commit_mobile_checksum_func_setup_commitment() != 41004) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_zk_commit_mobile_checksum_func_test_performance() != 40534) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}()

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all